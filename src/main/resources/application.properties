spring.profiles.active=@activatedProperties@

spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# Logging
logging.level.com.antilamer.thingTracker=DEBUG
logging.level.org.springframework.web=ERROR

# SQLFeatureNotSupportedException fix for PostgreSQL
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

app.jwtSecret= JWTSuperSecretKey
app.jwtExpirationInMs = 604800000

#Oauth
app.auth.tokenSecret =  3922530299e6306208f76e4df704be26
app.auth.tokenExpirationMsec = 864000000


# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redhttp://localhost:4200/oauth2/redirectirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris = http://localhost:4200/#/login

spring.security.oauth2.client.registration.facebook.clientId = 442984472908153
spring.security.oauth2.client.registration.facebook.clientSecret = 320297f1b79f2f59eed60c1c64f51c5a
#spring.security.oauth2.client.registration.facebook.redirectUriTemplate = "{baseUrl}/api/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.facebook.scope = email, public_profile